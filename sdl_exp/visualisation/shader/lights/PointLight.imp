#include "PointLight.h"
#include "LightsBuffer.h"

PointLight::PointLight(const PointLight &old)
	: properties(old.properties)
	, tProperties(old.tProperties)
	, index(old.index)
{ }

PointLight::PointLight(LightProperties * const props, LightsBuffer::TLightProperties * const tProps, unsigned int index, bool init)
	: properties(props)
	, tProperties(tProps)
	, index(index)
{
	if(init)
	{
		properties[0] = LightProperties();//Initialise light
		tProperties->spotCutoff = 180.0f;//This value should never be used, but just incase it evaluates to -1.0f
		properties->spotCosCutoff = -1.0f;//Negative signifies this is point light
	}
}

void PointLight::Position(const glm::vec3 &xyz)
{
	tProperties->position = glm::vec4(xyz, 1.0f);
}
void PointLight::Color(const glm::vec3 &rgb)
{
	properties->color = rgb;
}
void PointLight::ConstantAttenuation(const float &factor)
{
	properties->constantAttenuation = factor;
}
void PointLight::LinearAttenuation(const float &factor)
{
	properties->linearAttenuation = factor;
}
void PointLight::QuadraticAttenuation(const float &factor)
{
	properties->quadraticAttenuation = factor;
}