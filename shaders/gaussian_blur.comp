#version 430
//https://github.com/chmaruni/nsight-gtc/blob/master/nsight-gtc.cu#L568
//Execute in 16x16 sized thread blocks
layout(local_size_x=16,local_size_y=16) in;

uniform _filterWeights
{
	float bias[34];//Max width +1
};
//Total particles
uniform uint _filterRadius;//Max val == 16
uniform uint _filterWidth;//(_filterRadius*2)+1
uniform uvec2 _imageDimensions;
uniform layout (r32f) readonly  image2D _imageIn;
uniform layout (r32f) writeonly image2D _imageOut;

shared float pixels[48][48];//16+16+16x16+16+16=2304
shared float hoz[16][48];//0+16+0x16x16x16=768, Horizontal convolution, central column x full height
ivec2 indexG(ivec2 index);
void main () 
{
	//Load blockWidth+2*_filterRadius pixels into shared
	//###
	//###
	//###
	const uint loadWidth = gl_WorkGroupSize.x + 2*_filterRadius;
	const ivec2 topLeftLoad = ivec2(gl_GlobalInvocationID.xy) - ivec2(_filterRadius);
	for(uint x = 0;x<loadWidth;x+=gl_WorkGroupSize.x)
	{
		for(uint y = 0;y<loadWidth;y+=gl_WorkGroupSize.y)
		{
			pixels[gl_LocalInvocationID.x+x][gl_LocalInvocationID.y+y] = imageLoad(_imageIn, indexG(topLeftLoad + ivec2(x,y))).r;
		}
	}
	//Sync
	memoryBarrierShared();
    barrier();
	//Horizontal convolution
	//_#_
	//_#_
	//_#_
	const uvec2 centerLeftLoad = gl_LocalInvocationID.xy + uvec2(_filterRadius,0);
	for(uint y = 0;y<loadWidth;y+=gl_WorkGroupSize.y)
	{
		float h_sum = 0.0f;
        float biasC = 0.0f;
		for(uint x = 0;x<_filterWidth;x++)
		{
			h_sum += bias[x] * pixels[gl_LocalInvocationID.x+x][gl_LocalInvocationID.y+y];
            biasC += bias[x];
        }
		hoz[gl_LocalInvocationID.x][gl_LocalInvocationID.y+y] = h_sum/biasC;
	}
	//Sync
	memoryBarrierShared();
    barrier();
	
	//Kill out of bounds threads (after the last sync)
	if(gl_GlobalInvocationID.x<_imageDimensions.x
	&&gl_GlobalInvocationID.y<_imageDimensions.y)
	{
		//Vertical convolution
		//___
		//_#_
		//___
		float v_sum = 0.0f;
        float biasC = 0.0f;
		for(uint y = 0;y<_filterWidth;y++)
		{
            v_sum += bias[y] * hoz[gl_LocalInvocationID.x][gl_LocalInvocationID.y+y];
            biasC += bias[y];
        }
		//Normalize
		v_sum /= biasC;//bias[_filterWidth];
		//Store result
		imageStore(_imageOut, ivec2(gl_GlobalInvocationID.xy), vec4(v_sum));
	}
}
/**
 * Returns the relevant global array index, clamping out of bounds index's
 */
ivec2 indexG(ivec2 index)
{
	return clamp(index,ivec2(0),ivec2(_imageDimensions)-ivec2(1));
}